import { Axios } from "../api/index.js";

export const notifyPhotographer = async (ctx, photographerId, client) => {
  const messageToPhotographer = `
–£ –≤–∞—Å –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç!\n
üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @${client.tg_username}\n
üîó –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: ${client.communicationMethod} `;
  try {
    await ctx.telegram.sendMessage(photographerId, messageToPhotographer, {
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å",
              callback_data: `
confirmClient_${client.id}`,
            },
            {
              text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
              callback_data: `
cancelClient_${client.id}`,
            },
          ],
        ],
      },
    });
  } catch (error) {
    if (error.code === 403) {
      console.error(`
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞`);
    }
    console.error(
      `
–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—É —Å ID ${photographerId}:`,
      error.message
    );
  }
};

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞
export const showClients = async (ctx) => {
  const photographer = ctx.session.userData;

  try {
    const clients = await Axios.get(`photographers/${photographer.id}/clients`)
      .then((res) => res.data)
      .catch((err) => {
        console.log(err.message);
        return [];
      });

    if (!clients || clients.length === 0) {
      return ctx.reply(
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–∏ –≤ —Å–æ—Ü. —Å–µ—Ç—è—Ö –∏ —Å–ø–∏—Å–æ–∫ –Ω–∞—á–Ω–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è!",
        { disable_notification: true }
      );
    }

    let message = "–í–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã:\n";
    clients.forEach((client, index) => {
      let clientsStatus =
        client.isConfirmed === 1
          ? "–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
          : client.isConfirmed === 0
          ? "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞"
          : "–ù–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ";
      message += `${index + 1}. @${
        client.tg_username || "–±–µ–∑ –∏–º–µ–Ω–∏"
      } - ${clientsStatus}, —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏: ${client.communicationMethod}\n`;
    });

    await ctx.reply(message, { disable_notification: true });
  } catch (error) {
    if (error.code === 403) {
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞`);
    } else {
      console.error(error.message);
    }
  }
};

// –ü–æ–∫–∞–∑–∞—Ç—å, –∫—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞
export const showReferrals = async (ctx) => {
  const photographer = ctx.session.userData;
  try {
    const referrals = await Axios.get(
      `photographers/${photographer.id}/referrals`
    )
      .then((res) => res.data)
      .catch(() => []);

    if (!referrals || referrals.length === 0) {
      return ctx.reply(
        "–ù–µ –∑–∞–±—ã–≤–∞–π –¥–µ–ª–∏—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥ –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞!",
        {
          disable_notification: true,
        }
      );
    }

    let message =
      "–ù–∞–π–¥–∏—Ç–µ –∑–¥–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É –æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–∏\n";
    referrals.forEach((referral) => {
      message += `\n@${referral.username || "–±–µ–∑ –∏–º–µ–Ω–∏"} –ø—Ä–∏–≤–µ–ª(–∞) ${
        referral.clients.length
      } –∫–ª–∏–µ–Ω—Ç–æ–≤:\n`;

      if (referral.clients.length > 0) {
        referral.clients.forEach((client, index) => {
          message += `  ${index + 1}. @${client.tg_username || "–±–µ–∑ –∏–º–µ–Ω–∏"}\n`;
        });
      } else {
        message += "–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤\n";
      }
      message += "---------------------------";
    });

    await ctx.reply(message, { disable_notification: true });
  } catch (error) {
    if (error.code === 403) {
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞`);
    } else {
      console.error(error.message);
    }
  }
};

// –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
export const confirmedClients = async (ctx, clientId) => {
  try {
    await Axios.patch(`clients/${clientId}/confirm`, { isConfirmed: 1 }).then(
      async (res) => {
        if (res.status === 200) {
          await ctx.answerCbQuery(
            "–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ß—Ç–æ–±—ã –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–∏, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª '–í–∞—Å —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç'."
          );
          await ctx.editMessageText("–ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úÖ", {
            parse_mode: "Markdown",
          });
        }
      }
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:", error.message);
    await ctx.answerCbQuery("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏!");
  }
};

// –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º
export const cancelClients = async (ctx, clientId) => {
  try {
    await Axios.patch(`clients/${clientId}/confirm`, { isConfirmed: 0 }).then(
      async (res) => {
        if (res.status === 200) {
          await ctx.answerCbQuery("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞!");
          await ctx.editMessageText("–ó–∞–ø–∏—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå", {
            parse_mode: "Markdown",
          });
        }
      }
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏:", error.message);
    await ctx.answerCbQuery("–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏!");
  }
};
